file                        = _{ SOI ~ item* ~ EOI }

item                        =  { struct_decl | function | const_item }
const_item                  =  { const_keyword ~ ident ~ typespec ~ assign ~ expr ~ semicolon }

ident                       = @{ (XID_START | "_" | "$") ~ XID_CONTINUE* }

/// Whitespace and Comments
WHITESPACE                  = _{ (" " | "\t" | NEWLINE)+ }
COMMENT                     = _{ comment_block | comment_line }
comment_block               = @{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
comment_line                = @{ "//" ~ (!NEWLINE ~ ANY)* }

/// Keywords
mut_keyword                 =  { "mut" }
const_keyword               =  { "const" }
unsafe_keyword              =  { "unsafe" }
let_leyword                 = _{ "let" }
return_keyword              = _{ "return" }
if_keyword                  = _{ "if" }
else_keyword                = _{ "else" }
while_keyword               = _{ "while" }
loop_keyword                = _{ "loop" }
for_keyword                 = _{ "for" }
in_keyword                  = _{ "in" }
fn_keyword                  = _{ "fn" }
as_keyword                  = _{ "as" }
struct_keyword              = _{ "struct" }
break_keyword               = _{ "break" }

/// Types
typespec                    =  { colon ~ ty }

ty                          = _{ array_ty | tuple_ty | ptr_ty | ident }
ptr_ty                      =  { "*" ~ (const_keyword | mut_keyword) ~ ty }

/// Functions

// A code block is simply a sequence of statements with an optional expression at the end
code_block                  =  { open_block ~ stmt* ~ close_block }
unsafe_code_block           =  { unsafe_keyword? ~ code_block }

function                    =  { unsafe_keyword? ~ fn_keyword ~ ident ~ function_args ~ function_return? ~ code_block }
function_args               = _{ open_paren ~ (function_arg ~ comma)* ~ function_arg? ~ close_paren }
function_arg                =  { binding ~ typespec }
function_return             =  { "->" ~ ty }

/// Statements
stmt                        = _{ item | local | (expr ~ semicolon?) }

local                       =  { let_leyword ~ binding ~ typespec? ~ (assign ~ expr)? ~ semicolon }

/// Bindings and accesses
binding                     =  { destructure | (mut_keyword? ~ ident) }

destructure                 =  { array_destructure | tuple_destructure | struct_destructure }


/// Expressions
expr                        =  { cast_expr | assign_expr | return_expr | break_expr | while_loop | for_loop | basic_expr }

basic_expr                  = _{ infix | inner_expr }

inner_expr                  = _{ deref_expr | dereferenceable_expr }
// expressions which can be implicitely dereferenced via field access, array access or function call
dereferenceable_expr        = _{
                                  braced_expr
                                | unsafe_code_block
                                | if_expr
                                | inf_loop
                                | struct_construct_expr
                                | array
                                | tuple
                                | reference_expr
                                | prefix
                                | literal
                                | ident
                            }

cast_expr                   =  { basic_expr ~ (as_keyword ~ ty)+ }
prefix                      =  { unary_operator ~ expr }
infix                       =  { inner_expr ~ (binary_operator ~ inner_expr)+ }

braced_expr                 = _{ open_paren ~ expr ~ close_paren }

field_access                =  { "." ~ (ident | decinteger) }
array_access                =  { open_square ~ expr ~ close_square }

reference_expr              =  { "&" ~ mut_keyword? ~ expr }
dereference                 =  { "*" } // not silent to differentiate implicit/explicit deref

implicit_deref_expr         = _{ dereferenceable_expr ~ (field_access | array_access | function_call)+} // x.0.h().y[1].z[4].w(x).etc
explicit_deref_expr         = _{ dereference ~ inner_expr }

deref_expr                  =  { implicit_deref_expr | explicit_deref_expr }
function_call               =  { open_paren ~ (expr ~ comma)* ~ expr? ~ close_paren }

return_expr                 =  { return_keyword ~ expr }
break_expr                  =  { break_keyword ~ ("'" ~ ident)? ~ expr? }

assign_expr                 =  { (deref_expr | ident) ~ assign_operator ~ expr }

/// Conditionals
if_expr                     =  { if_keyword ~ expr ~ code_block ~ if_else? }
if_else                     = _{ else_keyword ~ (if_expr | code_block)}

/// Loops
loop_label                  = _{ "'" ~ ident ~ ":" }
while_loop                  =  { loop_label? ~ while_keyword                      ~ expr ~ code_block }
for_loop                    =  { loop_label? ~ for_keyword ~ binding ~ in_keyword ~ expr ~ code_block }
inf_loop                    =  { loop_label? ~ loop_keyword                              ~ code_block }

/// Arrays
array                       = _{ array_lit | array_splat }
array_lit                   =  { open_square ~ (expr ~ comma)*  ~ expr?      ~ close_square }
array_splat                 =  { open_square ~ expr ~ semicolon ~ expr       ~ close_square }
array_ty                    =  { open_square ~ ty   ~ semicolon ~ expr       ~ close_square }
array_destructure           =  { open_square ~ (binding ~ comma)+ ~ binding? ~ close_square }

/// Tuples
tuple                       =  { open_paren ~ (expr    ~ comma)+ ~ expr?    ~ close_paren }
tuple_ty                    =  { open_paren ~ (ty      ~ comma)+ ~ ty?      ~ close_paren }
tuple_destructure           =  { open_paren ~ (binding ~ comma)+ ~ binding? ~ close_paren }

/// Structs
struct_field                =  { ident ~ typespec }
struct_fields               = _{ (struct_field ~ comma)* ~ struct_field? }
struct_decl                 =  { struct_keyword ~ ident ~ open_block ~ struct_fields ~ close_block }

struct_construct_field      =  { ident ~ (colon ~ expr)? }
struct_construct_fields     = _{ (struct_construct_field ~ comma)* ~ struct_construct_field? }
struct_construct_expr       =  { ident ~ open_block ~ struct_construct_fields ~ close_block }

struct_destructure_field    =  { (mut_keyword ~ ident) | (ident ~ (colon ~ binding)?) }
struct_destructure_fields   = _{ (struct_destructure_field ~ comma)* ~ struct_destructure_field? }
struct_destructure          =  { ident ~ open_block ~ struct_destructure_fields ~ close_block }

/// Basic symbols
colon                       = _{ ":" }
semicolon                   = _{ ";" }
comma                       = _{ "," }
open_block                  = _{ "{" }
close_block                 = _{ "}" }
open_square                 = _{ "[" }
close_square                = _{ "]" }
open_paren                  = _{ "(" }
close_paren                 = _{ ")" }
low_line                    = _{ "_" }

/// Literal values
literal                     =  { float | signed_integer | boolean | string }

string                      = _{ string_single_line | raw_string }
string_single_line          = _{ string_delimiter ~ string_content ~ string_delimiter }
string_content              = ${ (string_escape | !(string_delimiter | "\\") ~ ANY)* }
string_delimiter            = _{ "\"" }
string_unicode              = _{ "u" ~ ASCII_HEX_DIGIT{4} }
string_escape               = _{ "\\" ~ ("\"" | "\\" | "a" | "b" | "f" | "n" | "r" | "t" | "v" | string_unicode) }

raw_string                  = ${
                                "r" ~ PUSH("#"*) ~ "\"" // push the number signs onto the stack
                                ~ raw_string_interior
                                ~ "\"" ~ POP            // match a quotation mark and the number signs
                            }
// unless the next character is a quotation mark
// followed by the correct amount of number signs,
// consume one character
raw_string_interior         = @{ (!("\"" ~ PEEK) ~ ANY)* }

float                       = @{ signed_integer+ ~ "." ~ integer+ ~ (^"e" ~ signed_integer+)? }

signed_integer              = _{ (plus | minus)? ~ integer }
integer                     = _{ hexinteger | bininteger | octinteger | decinteger }

decinteger                  = @{         (ASCII_DIGIT     | low_line)+ }
bininteger                  = @{ ^"0b" ~ (ASCII_BIN_DIGIT | low_line)+ }
hexinteger                  = @{ ^"0x" ~ (ASCII_HEX_DIGIT | low_line)+ }
octinteger                  = @{ ^"0o" ~ (ASCII_OCT_DIGIT | low_line)+ }

boolean                     = _{ boolean_true | boolean_false }
boolean_true                =  { "true" }
boolean_false               =  { "false" }

/// Operators
multiply                    =  { "*" }
divide                      =  { "/" }
modulus                     =  { "%" }
plus                        =  { "+" }
minus                       =  { "-" }
shift_left                  =  { "<<" }
shift_right                 =  { ">>" }
less_than                   =  { "<" }
less_than_or_equal          =  { "<=" }
greater_than                =  { ">" }
greater_than_or_equal       =  { ">=" }
not_equal                   =  { "!=" }
equal                       =  { "==" }
logical_and                 =  { "&&" }
logical_or                  =  { "||" }
logical_not                 =  { "!" }
bitwise_and                 =  { "&" }
bitwise_or                  =  { "|" }
bitwise_xor                 =  { "^" }
assign                      =  { "=" }
range                       =  { ".." }

unary_operator              = _{ plus | minus | logical_not }
binary_operator             = _{
                                multiply | divide | modulus |
                                plus | minus |
                                shift_left | shift_right |
                                less_than_or_equal | less_than |
                                greater_than_or_equal | greater_than |
                                not_equal | equal |
                                logical_and | logical_or |
                                bitwise_and | bitwise_or | bitwise_xor |
                                range
                            }

assign_operator             =  {(
                                multiply | divide | modulus |
                                plus | minus |
                                shift_left | shift_right |
                                bitwise_and | bitwise_or | bitwise_xor
                            )? ~ assign}

