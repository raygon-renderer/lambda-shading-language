file                        = _{ SOI ~ item* ~ EOI }

item                        = _{ struct_decl | function | global_statements }
global_statements           = _{ (const_stmt) ~ semicolon }

/// Statements
stmt                        = _{ terminated_stmt | if_expr | while_loop | for_loop | unsafe_code_block }
terminated_stmt             = _{ (let_stmt | const_stmt | assign_stmt | function_call | return_stmt) ~ semicolon }

const_stmt                  =  { "const" ~ ident ~ typespec ~  "=" ~ expr   }
let_stmt                    =  { "let" ~ binding ~ typespec ~ ("=" ~ expr)? }
return_stmt                 =  { "return" ~ expr }
assign_stmt                 =  { dereferenceable ~ assign_operator ~ expr }

mutable                     =  { "mut" }
binding                     =  { destructure | (mutable? ~ ident) }

destructure                 = _{ array_destructure | tuple_destructure | struct_destructure }
dereferenceable             = _{ field_expr | array_index | ident }

/// Values and Types
ident                       = @{ ("_" | XID_START) ~ XID_CONTINUE* }

typespec                    = _{ colon ~ ty }
ty                          = _{ array_ty | tuple_ty | ptr_ty | ident }
ptr_ty                      = _{ mut_ptr | const_ptr }
mut_ptr                     =  { "*mut"   ~ ty }
const_ptr                   =  { "*const" ~ ty }

literal                     = _{ decimal | integer | boolean | string }

string                      = _{ string_single_line | raw_string }
string_single_line          = _{ string_delimiter ~ string_content ~ string_delimiter }
string_content              = ${ (string_escape | !(string_delimiter | "\\") ~ ANY)* }
string_delimiter            = _{ "\"" }
string_unicode              = _{ "u" ~ ASCII_HEX_DIGIT{4} }
string_escape               = _{ "\\" ~ ("\"" | "\\" | "a" | "b" | "f" | "n" | "r" | "t" | "v" | string_unicode) }

raw_string                  = ${
                                "r" ~ PUSH("#"*) ~ "\"" // push the number signs onto the stack
                                ~ raw_string_interior
                                ~ "\"" ~ POP            // match a quotation mark and the number signs
                            }

// unless the next character is a quotation mark
// followed by the correct amount of number signs,
// consume one character
raw_string_interior         = @{ (!("\"" ~ PEEK) ~ ANY)* }

/// Functions

// A code block is simply a sequence of statements with an optional expression at the end
code_block                  =  { open_block ~ (item | stmt)* ~ expr? ~ close_block }
unsafe_code_block           =  { unsafe_keyword? ~ code_block }
function                    =  { "fn" ~ unsafe_keyword? ~ ident ~ function_args ~ function_return? ~ code_block }
function_args               = _{ open_paren ~ (function_arg ~ comma)* ~ function_arg? ~ close_paren }
function_arg                =  { binding ~ typespec }
function_return             =  { "->" ~ ty }
unsafe_keyword              =  { "unsafe" }

function_call               =  { ident ~ open_paren ~ (expr ~ comma)* ~ expr? ~ close_paren }

/// Expressions
expr                        = _{ cast_expr | basic_expr }
basic_expr                  = _{ infix     | inner_expr }

inner_expr                  = _{ array_index | accessible_expr }
// expressions which can be accessed via array indexing
accessible_expr             = _{
                                  braced_expr
                                | unsafe_code_block
                                | prefix
                                | function_call
                                | if_expr
                                | struct_construct_expr
                                | field_expr
                                | array
                                | tuple
                                | literal
                                | ident
                            }

cast_expr                   =  { basic_expr ~ ("as" ~ ty)+ }

braced_expr                 = _{ open_paren ~ expr ~ close_paren }
field_ident                 = _{ ident | ASCII_DIGIT }
field_expr                  =  { ident ~ ("." ~ field_ident)+ } // x.0.y.z.w.etc

prefix                      =  { unary_operator ~ expr }
infix                       =  { inner_expr ~ (binary_operator ~ inner_expr)+ }

/// Conditionals
if_expr                     =  { "if" ~ expr ~ code_block ~ if_else? }
if_else                     =  { "else" ~ (if_expr | code_block)}

/// Loops
loop_label                  =  { "'" ~ ident }
while_loop                  =  { loop_label? ~ "while"              ~ expr ~ code_block }
for_loop                    =  { loop_label? ~ "for" ~ ident ~ "in" ~ expr ~ code_block }

/// Arrays
array                       = _{ array_lit | array_splat }
array_lit                   =  { open_square ~ (expr ~ (comma ~ expr)*)? ~ close_square }
array_splat                 =  { open_square ~ expr ~ semicolon ~ expr ~ close_square }
array_ty                    =  { open_square ~ ty   ~ semicolon ~ expr ~ close_square }
array_index                 =  { accessible_expr ~ (open_square ~ expr ~ close_square)+ }
array_destructure           =  { open_square ~ (binding ~ (comma ~ binding)*)? ~ close_square }

/// Tuples
tuple                       =  { open_paren ~ (expr    ~ comma)+ ~ expr?    ~ close_paren }
tuple_ty                    =  { open_paren ~ (ty      ~ comma)+ ~ ty?      ~ close_paren }
tuple_destructure           =  { open_paren ~ (binding ~ comma)+ ~ binding? ~ close_paren }

/// Structs
struct_field                =  { ident ~ colon ~ ty }
struct_fields               = _{ (struct_field ~ comma)* ~ struct_field? }
struct_decl                 =  { "struct" ~ ident ~ open_block ~ struct_fields ~ close_block }

struct_construct_field      =  { ident ~ colon ~ expr }
struct_construct_fields     = _{ (struct_construct_field ~ comma)* ~ struct_construct_field? }
struct_construct_expr       =  { ident ~ open_block ~ struct_construct_fields ~ close_block }

struct_destructure_field    =  { ident ~ (colon ~ binding)? }
struct_destructure_fields   = _{ (struct_destructure_field ~ comma)* ~ struct_destructure_field? }
struct_destructure          =  { ident ~ open_block ~ struct_destructure_fields ~ close_block }

/// Basic symbols
colon                       = { ":" }
semicolon                   = { ";" }
comma                       = { "," }
open_block                  = { "{" }
close_block                 = { "}" }
open_square                 = { "[" }
close_square                = { "]" }
open_paren                  = { "(" }
close_paren                 = { ")" }

/// Whitespace and Comments
WHITESPACE                  = _{ (" " | "\t" | NEWLINE)+ }
COMMENT                     = _{ comment_block | comment_line }
comment_block               = @{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
comment_line                = @{ "//" ~ (!NEWLINE ~ ANY)* }

/// Numeric values
decimal                     = ${ signed_integer+ ~ ("." ~ integer+)? ~ (^"e" ~ signed_integer)? }

signed_integer              =  { "-"? ~ integer }
integer                     = ${ hexinteger | binaryinteger | octalinteger | decinteger }

decinteger                  = @{ ASCII_DIGIT+ }
binaryinteger               = @{ ^"0b" ~ ASCII_BIN_DIGIT+ }
hexinteger                  = @{ ^"0x" ~ ASCII_HEX_DIGIT+ }
octalinteger                = @{ ^"0o" ~ ASCII_OCT_DIGIT+ }

/// Operators
reference                   =  { "&" ~ mutable? }
dereference                 =  { "*" }
multiply                    =  { "*" }
divide                      =  { "/" }
modulus                     =  { "%" }
plus                        =  { "+" }
minus                       =  { "-" }
shift_left                  =  { "<<" }
shift_right                 =  { ">>" }
less_than                   =  { "<" }
less_than_or_equal          =  { "<=" }
greater_than                =  { ">" }
greater_than_or_equal       =  { ">=" }
not_equal                   =  { "!=" }
equal                       =  { "==" }
logical_and                 =  { "&&" }
logical_or                  =  { "||" }
logical_not                 =  { "!" }
bitwise_and                 =  { "&" }
bitwise_or                  =  { "|" }
bitwise_xor                 =  { "^" }
assign                      =  { "=" }
range                       =  { ".." }

unary_operator              = _{ reference | dereference | plus | minus | logical_not }
binary_operator             = _{
                                multiply | divide | modulus |
                                plus | minus |
                                shift_left | shift_right |
                                less_than_or_equal | less_than |
                                greater_than_or_equal | greater_than |
                                not_equal | equal |
                                logical_and | logical_or |
                                bitwise_and | bitwise_or | bitwise_xor |
                                range
                            }

assign_operator             =  {(
                                multiply | divide | modulus |
                                plus | minus |
                                shift_left | shift_right |
                                bitwise_and | bitwise_or | bitwise_xor
                            )? ~ "="}

/// Boolean literal
boolean                     =  { boolean_true | boolean_false }
boolean_true                =  { "true" }
boolean_false               =  { "false" }
